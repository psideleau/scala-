/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
import org.scalatest.{BeforeAndAfter, FunSpec, FunSuite, Matchers}
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class LibrarySuite extends FunSpec with BeforeAndAfter with Matchers {
  var library : Library  = _

  before {
    library = new Library()
  }

//  describe("max profilt") {
//    it ("should be equal") {
//      library.maxProfitEasy(Array(7, 1, 5, 3, 6, 4)) shouldBe 5
//    }
//  }
//
//  describe("min chocalate") {
//    it("is -1 when cities have no towers") {
//      library.minCandy(List(1, 1)) shouldBe 0
//    }
//  }
//
//  describe("min chocalate diff of 1") {
//    it("is 1") {
//      library.minCandy(List(1, 1, 2)) shouldBe 1
//    }
//  }
//
//  describe("min chocalate diff of 1 4") {
//    it("is 1 4") {
//      library.minCandy(List(1, 2, 3)) shouldBe 2
//    }
//  }

//  describe("should rob") {
//    it("is 1 4") {
//      library.rob(Array(50, 5, 7, 100)) shouldBe 150
//    }
//  }
//
//  describe("should rob") {
//    it("odsss") {
//      library.rob(Array(50, 5, 75, 25, 100)) shouldBe 225
//    }
//  }
//
//  describe("should rob") {
//    it("odss") {
//      library.rob(Array(50, 5, 75, 25)) shouldBe 125
//    }
//  }
//
//  describe("should rob") {
//    it("even") {
//      library.rob(Array(0, 25, 75, 100)) shouldBe 125
//    }
//  }
//
//  describe("should rob") {
//    it("even 2") {
//      library.rob(Array(0, 25, 75, 100, 90, 200)) shouldBe 325
//    }
//  }
//
//
//  describe("should rob") {
//    it("even 3") {
//      library.rob(Array(0, 25, 0, 95, 100)) shouldBe 125
//    }
//  }

//  describe("should rob") {
//    it("even 0") {
//      library.rob(Array(2,4,8,9,9,3)) shouldBe 19
//    }
//  }
//
  describe("max subarray of 1") {
    it ("1") {
      library.maxSubArray(Array(2)) shouldBe 2
    }
  }

  describe("max subarray of 1 2") {
    it ("1") {
      library.maxSubArray(Array(2, 3)) shouldBe 5
    }
  }

  describe("max subarray of less") {
    it ("1") {
      library.maxSubArray(Array(2, -1)) shouldBe 2
    }
  }

  describe("max subarray of less -") {
    it ("1") {
      library.maxSubArray(Array(-1, -1, -1)) shouldBe -1
    }
  }

  describe("max subarray of less 5") {
    it ("1") {
      library.maxSubArray(Array(-2,1,-3,4,-1,2,1,-5,4)) shouldBe 6
    }
  }

  describe("max subarray of smaller") {
    it ("3") {
      library.maxSubArray(Array(1,2,-1,-2,2,1,-2,1)) shouldBe 3
    }
  }

  describe("max subarray of smaller1") {
    it ("31") {
      library.maxSubArray(Array(-2,2,1,-2,1,4,-5,4)) shouldBe 6
    }
  }


//  describe("min chocalate diff of 1 2") {
//    it("is 1 2") {
//      library.minCandy(List(2, 3, 3)) shouldBe 2
//    }
//  }
//
//  describe("min chocalate hackerran") {
//    it("is 1 2") {
//      library.minCandy(List(2, 2, 3, 7)) shouldBe 2
//    }
//  }
//
//  describe("min chocalate diff of 1 2 1") {
//    it("is 1 2") {
//      library.minCandy(List(298,633,561,845,830,688,584,139,943,52,982,54,536,360,87,287,709,106,575,987,787,627,99,402,169,6,923,326,1,111,881,299,96,794,496,926,482,432,65,777,837,400,831,373,760,270,12,821,377,587,160,164,566,260,919,735,618,842,414,619,305,647,271,401,441,119,680,275,552,97,52,389,849,235,762,962,506,126,783,883,66,944,399,632,556,318,720,174,160,134,145,817,133,768,571,574,888,603,849,440,700,253,181,902,488,295,864,346,421,647,581,839,943,981,472,499,299,544,25,812,30,523,629,163,291,552,737,531,155,938,323,208,543,504,110,31,799,326,730,221,325,311,60,269,292,884,120,944,428,146,108,810,21,89)) shouldBe 14689
//    }
//  }
//
////  describe("should print towers of hanoi") {
////    it("is -1 when cities have no towers") {
////      library.hanoi(1) shouldBe List("move s to d")
////      //   library.findMinTowers(4, List.fill(100000)(1)) shouldBe 2565
////    }
////  }
//
//
//  describe("should fine minimum towers") {
//    it("is -1 when cities have no towers") {
//  library.findMinTowers(20, List(0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)) shouldBe 32
//   //   library.findMinTowers(4, List.fill(100000)(1)) shouldBe 2565
//    }
//  }
//
//  describe("losing when every contest is not important") {
//    it("should be max") {
//      val contests = List(Contest(5,0),
//        Contest(2, 0),
//        Contest(1, 0))
//
//      library.findMaximumLuckBalance(maxLoses = 5, contests ) shouldBe 8
//    }
//  }

//  describe("should get range of tower from city") {
//    it ("first city can only span tower to the right") {
//       library.findMaxRightCityTowerWillCover(towerAtCity=0, k=1, cities=(0 to 4).toList) shouldBe Set(0)
//       library.findMaxRightCityTowerWillCover(towerAtCity=0, k=2, cities=(0 to 4).toList) shouldBe Set(0, 1)
//       library.findMaxRightCityTowerWillCover(towerAtCity=4, k=2, cities=(0 to 4).toList) shouldBe Set(3, 4)
//       library.findMaxRightCityTowerWillCover(towerAtCity=3,  k=4, cities=(0 to 4).toList) shouldBe Set(0, 1, 2, 3, 4)
//    }
//  }

//  describe("CANNOT LOST ANY CONTEST") {
//    it("should be max") {
//      val contests = List(Contest(5,1),
//        Contest(2, 1),
//        Contest(1, 1))
//
//      library.findMaximumLuckBalance(maxLoses = 0, contests ) shouldBe -8
//    }
//  }
//
//  describe("should count distance") {
//    it("should find maximum balance") {
//      val contests = List(Contest(5,1),
//        Contest(2, 1),
//        Contest(1, 1),
//        Contest(8, 1),
//        Contest(10, 0),
//        Contest(5, 0))
//      library.findMaximumLuckBalance(maxLoses = 3, contests ) shouldBe 29
//    }
//  }
//
//  describe("should count distance") {
//     it("should be just move to the right if doesn't exceed point b") {
//       library.toAndFro(1, 10, 8) shouldBe 9
//       library.toAndFro(1, 10, 1) shouldBe 2
//       library.toAndFro(1, 10, 3) shouldBe 4
//       library.toAndFro(10, 6, 1) shouldBe 9
//     }
//
//    it("should count exceeding the right") {
//      library.toAndFro(2, 4, 3) shouldBe 3
//      library.toAndFro(2, 4, 4) shouldBe 2
//      library.toAndFro(2, 4, 5) shouldBe 3
//      library.toAndFro(10, 4, 8) shouldBe 6
//    }
//  }

//  describe("should get candles2") {
//    it("should get birthdaycake candles") {
//      library.printInOrder(Array(3, 2, 1, 3))
//    }
//  }
//
//  describe("should get candles") {
//    it("should get birthdaycake candles") {
//      library.candles(4, Array(3, 2, 1, 3)) shouldBe 2
//    }
//  }
//
//  describe("should compute discounted prices") {
//    it("should be zero when cart is empty") {
//      library.price(List()) shouldBe 0
//    }
//
//    it("there is no discount when purchasing just one book") {
//      library.price(List(0)) shouldBe 8
//    }
//
//    it("there is no discount when purchasing the same book") {
//      library.price(List(0, 0)) shouldBe 16
//    }
//
//    it("there is no discount when purchasing the same book regardles of amount") {
//      library.price(List(0, 0, 0, 0, 0)) shouldBe 40
//    }
//
//    it("there is a 10 percent discount when purchasing 3 in the seriers") {
//      library.price(List(0, 1, 2)) shouldBe 21.60
//    }
//
//    it("there is a 10 percent discount when purchasing 4 in the series") {
//      library.price(List(0, 1, 2, 3)) shouldBe 25.60
//    }
//
//    it("there is a 10 percent discount when purchasing 4 in the series + price of duplicate book") {
//      library.price(List(0, 0, 1, 2, 3)) shouldBe 33.60
//    }
//
//    it ("there should be 5 % discount when purcahse 2 in the series") {
//      library.price(List(0, 1)) shouldBe 15.20
//    }
//
//    it ("there should be 25 % discount when purcashing 5 in the series") {
//      library.price(List(0, 1, 2, 3, 4)) shouldBe 30
//    }
//
//    it ("should get multiple discount per group bof 2") {
//       library.price(List(0, 0, 1, 1, 0)) shouldBe 38.40
//    }
//
//    it ("should get multiple discount for group of 3") {
//      library.price(List(0, 0, 1, 1, 2)) shouldBe 36.80 +- 0.001
//    }
//
//    it ("should get multiple discount for group of 3 and 2 paris") {
//      library.price(List(0, 0, 0, 1, 1, 1, 2)) shouldBe 52.00 +- 0.001
//    }
//
//    it ("should get multiple discount for group of 4") {
//      library.price(List(0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3)) shouldBe 104.8 +- 0.001
//    }
//
//    it ("should get multiple discount for group of 4 2") {
//      library.price(List(0, 0, 1, 1, 2, 3)) shouldBe 40.8 +- 0.001
//    }
//  }
//
//
//  describe("adding 5") {
//    it ("should be 5") {
//      library.method1(4) shouldBe 9
//      assertResult(9) {
//        library.method1(4)
//      }
//    }
//  }
//
//  def ~=(x: Double, y: Double, precision: Double) = {
//    if ((x - y).abs < precision) true else false
//  }
}
